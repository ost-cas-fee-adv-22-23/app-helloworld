name: Reusable - Build and Deploy

on:
    workflow_call:

jobs:
  release:
    name: 'Create Release with Docker'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'
          token_format: 'access_token'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Google Artifact Registry
        uses: docker/login-action@v2
        with:
          registry: europe-west6-docker.pkg.dev
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v3
        with:
          semantic_version: 19
          extra_plugins: |
            @codedependant/semantic-release-docker
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            NEXT_PUBLIC_QWACKER_API_URL=${{ secrets.NEXT_PUBLIC_QWACKER_API_URL }}
          secrets: |
            "npmrc_secret=${{ secrets.NPMRC_SECRET }}"
          push: true
          tags: |
            europe-west6-docker.pkg.dev/expanded-symbol-389711/helloworld/app-helloworld:latest
            europe-west6-docker.pkg.dev/expanded-symbol-389711/helloworld/app-helloworld:${{ github.sha }}
  deploy:
    name: Deploy To GCP
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v3
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'
          token_format: 'access_token'
      - uses: hashicorp/setup-terraform@v2
      - run: terraform fmt -check
        working-directory: terraform
      - run: terraform init
        working-directory: terraform
      - run: terraform validate
        working-directory: terraform
      - run: terraform apply -auto-approve
        env:
          TF_VAR_commit_hash: ${{ github.sha }}
        working-directory: terraform